1.Createthefollowingtableswithgivenattributeshavingappropriatedatatypeandspecifythenecessaryprimaryandforeignkeyconstraints:Customer(Custid,Custname,Age,phone)Loan(Loanid,Amount,Custid,EMI)a)ListthenameofthecustomerswhohavetakenloanformorethanRs.50,000.b)ListtheCustomeridofthosewhohavenoloan.c)Listthetotalcountofloanavailed.d)CreateaTriggerforcustomertableitwillupdateanothertableamountwhileinsertingvalues.

:

CreateTableswithConstraints

SQLstatementstocreateCustomerandLoantables:

sql
Copycode
--CreateCustomertableCREATETABLECustomer(
CustidINTPRIMARYKEY,
CustnameVARCHAR(100),AgeINT,
phoneVARCHAR(15)
);

--CreateLoantablewithaforeignkeyreferencetoCustomertableCREATETABLELoan(
LoanidINTPRIMARYKEY,AmountDECIMAL(10,2),
CustidINT,
EMIDECIMAL(10,2),
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)
);

QueriesforEachSubpart

ListthenamesofthecustomerswhohavetakenaloanformorethanRs.50,000.

sql
Copy codeSELECTCustnameFROMCustomer
WHERECustidIN(SELECTCustidFROMLoan
WHEREAmount>50000
);

ListtheCustomerIDsofthosewhohavenoloan.

sql
Copy codeSELECTCustidFROMCustomer
WHERECustidNOTIN(
SELECTCustidFROMLoan
);

Listthetotalcountofloansavailed.

sql
Copycode
SELECTCOUNT(*)ASTotalLoansFROMLoan;

CreateaTriggertoUpdatetheAmountTable

AssumingthereisanAmounttablewithastructurelikethis:

sql
Copycode
--CreateAmounttabletobeupdatedbythetriggerCREATETABLEAmount(
CustidINTPRIMARYKEY,
TotalAmountDECIMAL(10,2)
);

ThetriggerwillupdatetheAmounttablewheneveranewrecordisinsertedintotheCustomer
table.

Triggercreation:

sql
Copycode
--CreateTriggerontheCustomertabletoupdateAmounttableCREATETRIGGERUpdateAmountAfterInsert
AFTERINSERTONCustomerFOREACHROW
BEGIN
-- Assume initial amount is 0 when a new customer is addedINSERTINTOAmount(Custid,TotalAmount)VALUES(NEW.Custid,0);
END;

1.CreateTableswithConstraintsSQLstatementstocreateCustomerandLoantables:sqlCopycode--CreateCustomertableCREATETABLECustomer(CustidINTPRIMARYKEY,CustnameVARCHAR(100),AgeINT,phoneVARCHAR(15));--CreateLoantablewithaforeignkeyreferencetoCustomertableCREATETABLELoan(LoanidINTPRIMARYKEY,AmountDECIMAL(10,2),CustidINT,EMIDECIMAL(10,2),FOREIGNKEY(Custid)REFERENCESCustomer(Custid));2.QueriesforEachSubpart
(a)ListthenamesofthecustomerswhohavetakenaloanformorethanRs.50,000.sqlCopycodeSELECTCustnameFROMCustomerWHERECustidIN(SELECTCustidFROMLoanWHEREAmount>50000);(b)ListtheCustomerIDsofthosewhohavenoloan.sqlCopycodeSELECTCustidFROMCustomerWHERECustidNOTIN(SELECTCustidFROMLoan);(c)Listthetotalcountofloansavailed.sqlCopycodeSELECTCOUNT(*)ASTotalLoansFROMLoan;3.CreateaTrigger toUpdate the AmountTable AssumingthereisanAmounttablewithastructurelikethis:sqlCopycode--CreateAmounttabletobeupdatedbythetriggerCREATETABLEAmount(CustidINTPRIMARYKEY,TotalAmountDECIMAL(10,2));ThetriggerwillupdatetheAmounttablewheneveranewrecordisinsertedintotheCustomertable.Triggercreation:sqlCopycode--CreateTriggerontheCustomertabletoupdateAmounttableCREATETRIGGERUpdateAmountAfterInsertAFTERINSERTONCustomerFOREACHROWBEGIN--

Assumeinitialamountis0whenanewcustomerisaddedINSERTINTOAmount(Custid,TotalAmount) VALUES(NEW.Custid,0);END;

SQLStatementstoCreateCustomerandLoanTables

sql
Copycode
--CreateCustomertableCREATETABLECustomer(
Custid INT PRIMARY KEY,CustnameVARCHAR(100)NOTNULL,AgeINT,
phoneVARCHAR(15)
);

--CreateLoantablewithaforeignkeyreferencetotheCustomertableCREATETABLELoan(
LoanidINTPRIMARYKEY,AmountDECIMAL(10,2),
CustidINT,
EMIDECIMAL(10,2),
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)ONDELETECASCADE
);

Customertable:
Custid:PrimaryKey.
Custname:Storescustomername.
Age:Storescustomerage.
phone:Storesphonenumber.
Loantable:
Loanid:PrimaryKey.
Amount:Storestheloanamount.
Custid:ReferencesCustidinCustomertable(ForeignKey).
EMI:StorestheEMIoftheloan.

QueriesforEachSubpart

ListthenamesofthecustomerswhohavetakenaloanformorethanRs.50,000:

sql
Copy codeSELECTCustnameFROMCustomer
WHERECustidIN(SELECTCustidFROMLoan
WHEREAmount>50000
);

ThisqueryfindscustomerswhoseCustidmatchesthoseintheLoantablewithanamountgreaterthanRs.50,000.

ListtheCustomerIDsofthosewhohavenoloan:

sql
Copy codeSELECTCustidFROMCustomer
WHERECustidNOTIN(
SELECTCustidFROMLoan
);

ThisqueryselectsallCustidsfromtheCustomertablethatarenotpresentintheLoantable,indicatingnoloanrecords.

Listthetotalcountofloansavailed:

sql
Copycode
SELECTCOUNT(*)ASTotalLoansFROMLoan;

ThisquerycountsthetotalnumberofrowsintheLoantable,representingthenumberofloanstaken.

CreateaTriggertoUpdatetheAmountTable

AssumingthereisanAmounttabletokeeptrackofthetotalloanamountforeachcustomer:

sql
Copycode
--CreateAmounttabletobeupdatedbythetriggerCREATETABLEAmount(
CustidINTPRIMARYKEY,
TotalAmountDECIMAL(10,2)
);

TriggertoupdateAmounttablewhenanewcustomerisinserted:

sql
Copycode
--CreateTriggerontheCustomertabletoupdateAmounttableCREATETRIGGERUpdateAmountAfterInsert
AFTERINSERTONCustomerFOREACHROW
BEGIN
-- Insert an initial amount of 0 when a new customer is addedINSERTINTOAmount(Custid,TotalAmount)VALUES(NEW.Custid,0);
END;

ThistriggerwillautomaticallyaddanentryintheAmounttableforeachnewcustomeraddedtotheCustomertablewithaninitialTotalAmountof0.

Summary

TheSQLscriptscreatethenecessarytablesandrelationships.
Querieshelpretrievedatarelatedtocustomersandtheirloans.

ThetriggerautomaticallymaintainsdataconsistencybetweenCustomerandAmount
tableswhenanewcustomerisinserted.

4o

Yousaid:

3.Createthefollowingtableswithgivenattributeshavingappropriatedatatypeandspecifythenecessaryprimaryandforeignkeyconstraints:Voter(VoterId,Votername,Gender,Boothid,Checkvote)checkvoteis1(voted)or0(notvoted)Booth(Boothid,Location,BIncharge)a)(i)ListthecountofvotersineachBooth(ii)ListthecountofMalevotersvoted.b)Displaytheoverallcountofvotersvotedintheelection.c)DisplaytheBoothid,Locationandcountofvotersvoted.d)Writeafunctiontoreturnthepercentageofpollinaboothwhenboothidisgivenasinput.HandleExceptions.

ChatGPTsaid:

ChatGPT

Let'sbreakdownthesolutionintoparts,creatingthetables,writingqueriesforthesubparts,andthendefiningthefunctiontocalculatethepercentageofpollsinabooth.

CreateTableswithConstraints

SQLstatementstocreateVoterandBoothtables:

sql
Copycode
--CreateBoothtableCREATETABLEBooth(
Boothid INT PRIMARY KEY,LocationVARCHAR(100)NOTNULL,BInchargeVARCHAR(100)NOTNULL
);

--CreateVotertablewithaforeignkeyreferencetotheBoothtableCREATETABLEVoter(
VoterId INT PRIMARY KEY,VoternameVARCHAR(100)NOTNULL,GenderVARCHAR(10),
BoothidINT,
CheckvoteINTCHECK(CheckvoteIN(0,1)),
FOREIGNKEY(Boothid)REFERENCESBooth(Boothid)ONDELETECASCADE
);

Boothtable:
Boothid:PrimaryKey.
Location:Locationofthebooth.
BIncharge:Boothin-charge'sname.
Votertable:
VoterId:PrimaryKey.
Votername:Storesvotername.
Gender:Storesgenderofthevoter.

Boothid:ReferencesBoothidintheBoothtable(ForeignKey).
Checkvote:Stores1ifthevoterhasvoted,0otherwise.

QueriesforEachSubpart

(a)(i)ListthecountofvotersineachBooth:

sql
Copycode
SELECTBoothid,COUNT(*)ASVoterCountFROMVoter
GROUPBYBoothid;

ThisquerycountsthenumberofvotersassociatedwitheachBoothidbygroupingthevoters.

(ii)ListthecountofMalevoterswhohavevoted:

sql
Copycode
SELECTCOUNT(*)ASMaleVotersVotedFROMVoter
WHEREGender='Male'ANDCheckvote=1;

Thisquerycountsmalevoterswhohavevoted(i.e.,whereCheckvoteis1).

Displaytheoverallcountofvoterswhohavevotedintheelection:

sql
Copycode
SELECTCOUNT(*)ASTotalVotersVotedFROMVoter
WHERECheckvote=1;

Thisquerycountsallvoterswhohavevoted(whereCheckvoteis1).

DisplaytheBoothid,Location,andcountofvoterswhohavevoted:

sql
Copycode
SELECTB.Boothid,B.Location,COUNT(V.VoterId)ASVotersVotedFROMBoothB
LEFTJOINVoterVONB.Boothid=V.BoothidWHEREV.Checkvote=1
GROUPBYB.Boothid,B.Location;

ThisqueryjoinstheBoothandVotertablestogetthecountofvoterswhohavevotedforeachbooth,includingboothlocation.

WriteaFunctiontoReturnthePercentageofPollinaBooth

Hereâ€™safunctiontocalculatethepercentageofvoterswhohavevotedinaspecifiedbooth.ThisfunctiontakesaBoothidasinputandhandlesexceptions.

sql
Copy codeDELIMITER//

CREATEFUNCTIONGetPollPercentage(booth_idINT)RETURNSDECIMAL(5,2)
BEGIN
DECLAREtotal_votersINT;DECLAREvoted_votersINT;
DECLAREpoll_percentageDECIMAL(5,2);

--HandlethescenariowhereboothIDmightnotexistDECLAREEXITHANDLERFORSQLEXCEPTION
RETURN-1;

--GetthetotalnumberofvotersinthespecifiedboothSELECTCOUNT(*)INTOtotal_voters
FROMVoter
WHEREBoothid=booth_id;

--GetthecountofvoterswhohavevotedinthespecifiedboothSELECTCOUNT(*)INTOvoted_voters
FROMVoter
WHEREBoothid=booth_idANDCheckvote=1;

--Iftotalvotersare0,return0toavoiddivisionbyzeroIFtotal_voters=0THEN
RETURN0;ELSE
--Calculatethepollpercentage
SETpoll_percentage=(voted_voters/total_voters)*100;RETURNpoll_percentage;
ENDIF;
END //DELIMITER;
Explanation:

ThefunctionGetPollPercentagecalculatesthepercentageofvoterswhohavevotedinaspecifiedbooth.
Ittakesbooth_idasaninputparameter.
Itdeclarestotal_votersandvoted_voterstostorecountsandpoll_percentage
fortheresult.
IthandlesexceptionswheretheboothIDmightnotexist,returning-1insuchcases.
Itcalculatesthepercentageas(voted_voters/total_voters)*100.
Iftotal_votersis0,itreturns0toavoiddivisionbyzeroerrors.

Summary

Thissolutionincludestablecreationwithprimaryandforeignkeyconstraints,queriestoextractinformationaboutvotersandbooths,andafunctiontocalculatevotingpercentages.
Thefunctionisdesignedtohandleinvalidinputsanddivisionbyzerogracefully.

4o

Yousaid:

Createthefollowingtableswithgivenattributeshavingappropriatedatatypeandspecifythenecessaryprimaryandforeignkeyconstraints:User(Userid,Name,Dept,Bookid,Accdate)Book(Bookid,Book_name,Author,Publication,Price)a)Listthenameoftheuserwhohadaccessedthecostliestbook.b)Listtheuseridandcountofbooksaccessedbytheuser.c)ListthebookspublishedbyWileypublisher.d)WriteaPL/SQLprogramtoprintthedetailsofthebookwhenBookidisgivenasinput.Handleappropriateexceptions.

ChatGPTsaid:

ChatGPT

Let'sbreakdownthesolutionintothefollowingparts:creatingtables,writingtherequiredqueries,anddefiningaPL/SQLprogramtodisplaybookdetailswhenaBookidisprovidedasinput.

CreateTableswithConstraints

SQLstatementstocreateUserandBooktables:

sql
Copycode
--CreateBooktableCREATETABLEBook(
Bookid INT PRIMARY KEY,Book_nameVARCHAR(100)NOTNULL,AuthorVARCHAR(100),
PublicationVARCHAR(100),PriceDECIMAL(10,2)
);

--CreateUsertablewithaforeignkeyreferencetotheBooktableCREATETABLEUser(
Userid INT PRIMARY KEY,NameVARCHAR(100)NOTNULL,DeptVARCHAR(100),
Bookid INT,AccdateDATE,
FOREIGNKEY(Bookid)REFERENCESBook(Bookid)
);

Booktable:
Bookid:PrimaryKey.
Book_name:Nameofthebook.
Author:Nameoftheauthor.
Publication:Publisher'sname.
Price:Priceofthebook.
Usertable:
Userid:PrimaryKey.
Name:Nameoftheuser.
Dept:Departmentoftheuser.
Bookid:ReferencesBookidintheBooktable(ForeignKey).
Accdate:Datewhentheuseraccessedthebook.

QueriesforEachSubpart

Listthenameoftheuserwhoaccessedthecostliestbook:

sql
Copy codeSELECTU.Name
FROMUserU
JOINBookBONU.Bookid=B.Bookid
WHEREB.Price=(SELECTMAX(Price)FROMBook);

ThisqueryfindstheuserwhoaccessedthebookwiththehighestpricebyjoiningtheUser
andBooktablesandusingasubquerytofindthemaximumprice.

ListtheUseridandcountofbooksaccessedbytheuser:

sql
Copycode
SELECTUserid,COUNT(Bookid)ASBookCountFROMUser
GROUPBYUserid;

Thisquerycountsthenumberofbooksaccessedbyeachuser,groupingresultsbyUserid.

Listthebookspublishedby"Wiley"publisher:

sql
Copycode
SELECTBookid,Book_name,Author,PriceFROMBook
WHEREPublication='Wiley';

Thisqueryselectsdetailsofbookspublishedby"Wiley".

WriteaPL/SQLProgramtoPrintBookDetails

Here'saPL/SQLprogramtoretrieveanddisplaydetailsofabookwhenaBookidisgivenasinput:

sql
CopycodeDECLARE
v_Book_name VARCHAR(100);v_Author VARCHAR(100);v_PublicationVARCHAR(100);v_PriceDECIMAL(10,2);
v_BookidINT:=&Bookid;--TakeinputforBookidBEGIN
--RetrievebookdetailsbasedonBookid
SELECTBook_name,Author,Publication,PriceINTOv_Book_name,v_Author,v_Publication,v_Price
FROMBook
WHEREBookid=v_Bookid;

--Outputthebookdetails

DBMS_OUTPUT.PUT_LINE('Book Name: ' || v_Book_name);DBMS_OUTPUT.PUT_LINE('Author: ' || v_Author);DBMS_OUTPUT.PUT_LINE('Publication:'||v_Publication);DBMS_OUTPUT.PUT_LINE('Price:'||v_Price);

EXCEPTION
WHENNO_DATA_FOUNDTHEN
DBMS_OUTPUT.PUT_LINE('NobookfoundwiththegivenBookid:'||v_Bookid);
WHENOTHERSTHEN
DBMS_OUTPUT.PUT_LINE('Anerroroccurred:'||SQLERRM);
END;

Explanation:

VariableDeclarations:Declaresvariablestostorebookdetailslikev_Book_name,v_Author,v_Publication,v_Price,andv_Bookid(whichwilltaketheinputvalue).
SELECTStatement:RetrievesthedetailsofthebookmatchingthegivenBookid
andstorestheminthedeclaredvariables.
DBMS_OUTPUT.PUT_LINE:Printstheretrievedbookdetails.
ExceptionHandling:
NO_DATA_FOUND:HandlesthecasewheretheBookiddoesnotexistinthe
Booktable.
OTHERS:Catchesanyotherexceptionsthatmightoccuranddisplaystheerrormessage.

Summary

TheUserandBooktablesaresetupwithprimaryandforeignkeyconstraints.
Queriesprovideinformationonusersaccessingbooks,publishers,and

Let'sworkthroughthesolutionstepbystep,includingcreatingthetables,writingtherequiredSQLqueries,creatingaview,anddefiningatriggerfortheminimumaccountbalance.

CreateTableswithConstraints

SQLstatementstocreateCustomer,Loan,andAccounttables:

sql
Copycode
--CreateCustomertableCREATETABLECustomer(
Custid INT PRIMARY KEY,CustnameVARCHAR(100)NOTNULL,AddrVARCHAR(200),
phnoVARCHAR(15),
pannoVARCHAR(10)UNIQUE
);

--CreateLoantablewithaforeignkeyreferencetoCustomertableCREATETABLELoan(
LoanidINTPRIMARYKEY,

AmountDECIMAL(10,2),
InterestDECIMAL(5,2),CustidINT,
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)ONDELETECASCADE
);

--CreateAccounttablewithaforeignkeyreferencetoCustomertableCREATETABLEAccount(
AcctnoINTPRIMARYKEY,AccbalDECIMAL(10,2),
CustidINT,
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)ONDELETECASCADE
);

Customertable:
Custid:PrimaryKey.
Custname:Nameofthecustomer.
Addr:Addressofthecustomer.
phno:Phonenumber.
panno:PANnumber(Unique).
Loantable:
Loanid:PrimaryKey.
Amount:Loanamount.
Interest:Interestrate.
Custid:ReferencesCustidinCustomertable(ForeignKey).
Accounttable:
Acctno:PrimaryKey.
Accbal:Accountbalance.
Custid:ReferencesCustidinCustomertable(ForeignKey).

QueriesforEachSubpart

Displaytheaccountbalanceofaparticularcustomer"ARUN":

sql
Copy codeSELECTA.AccbalFROMAccountA
JOINCustomerCONA.Custid=C.CustidWHEREC.Custname='ARUN';

ThisqueryjoinstheAccountandCustomertablestodisplaytheaccountbalanceofacustomerwiththename"ARUN".

Updatetheinterestwith1%whenAccbaloftheCustidisgreaterthan50%oftheLoanAmount:

sql
Copy codeUPDATELoanL
SETL.Interest=L.Interest+1WHEREL.CustidIN(
SELECTA.CustidFROMAccountA

WHEREA.Accbal>0.5*L.Amount
);

Thisqueryupdatestheinterestrate,increasingitby1%forcustomerswhoseaccountbalanceisgreater than50% oftheir loan amount.

CreateaviewwithAccbalandloanamountofallcustomers:

sql
Copycode
CREATEVIEWCustomerFinanceViewAS
SELECTC.Custid,C.Custname,A.Accbal,L.AmountASLoanAmountFROMCustomerC
LEFTJOINAccountAONC.Custid=A.CustidLEFTJOINLoanLONC.Custid=L.Custid;

ThisviewcombinesthecustomerID,name,accountbalance,andloanamountintoasingleview foreasyaccess.

Createatriggerwhichchecksforaminimumbalanceintheaccount:
Let'sassumethattheminimumbalancerequirementis1000.sql
Copy codeDELIMITER//

CREATETRIGGERCheckMinimumBalanceBEFOREUPDATEONAccount
FOREACHROWBEGIN
IF NEW.Accbal < 1000 THENSIGNALSQLSTATE'45000'
SETMESSAGE_TEXT='Accountbalancecannotbelessthantheminimumrequiredbalanceof1000.';
ENDIF;
END //DELIMITER;
Explanation:

TriggerName:CheckMinimumBalance
TriggerType:BEFOREUPDATE
TriggerAction:ChecksifthenewAccbal(balance)islessthan1000beforeupdating.
Condition:Ifthenewbalanceislessthan1000,anerroristriggeredusingSIGNALSQLSTATEtostoptheupdateanddisplayanappropriatemessage.

Summary

TheSQLscriptscreatetableswithprimaryandforeignkeyconstraints.
Queries(a)and(b)retrievetheaccountbalanceandupdatetheinterestratebasedonconditions.

Theviewcreatedin(c)givesacomprehensiveoverviewofaccountbalancesandloanamounts.
Thetriggerin(d)ensuresthataccountbalancesdonotfallbelowaspecifiedminimum.

4o

Yousaid:

6.Createthefollowingtableswithgivenattributeshavingappropriatedatatypeandspecifythenecessaryprimaryandforeignkeyconstraints:Customer(Custid,Custname,phno,pan,DOB) HomeLoan (HLoanid, Amount,Custid) VehicleLoan(VLoanid, Amount,Custid)a)ListtheCustidofthecustomerswhohavebothhomeloanandvehicleloan.b)ListtheCustidofthecustomerswhodonothaveanyloan.c)Createaviewwithcustomerid,Customernameandtotalloanamount(HomeLoanandVehicleLoan)d)WriteatriggerwhichdisplaystheHomeloandetailswheneverthevaluesareinsertedintherespectivetable.

ChatGPTsaid:

ChatGPT

Let'sworkthroughthistaskstepbystep,includingcreatingtableswithconstraints,writingqueries,creatingaview,anddefininga trigger.

CreateTableswithConstraints

SQLstatementstocreateCustomer,HomeLoan,andVehicleLoantables:

sql
Copycode
--CreateCustomertableCREATETABLECustomer(
Custid INT PRIMARY KEY,CustnameVARCHAR(100)NOTNULL,phnoVARCHAR(15),
panVARCHAR(10)UNIQUE,DOBDATE
);

--CreateHomeLoantablewithaforeignkeyreferencetoCustomertableCREATETABLEHomeLoan(
HLoanidINTPRIMARYKEY,AmountDECIMAL(10,2),
CustidINT,
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)ONDELETECASCADE
);

--CreateVehicleLoantablewithaforeignkeyreferencetoCustomertableCREATETABLEVehicleLoan(
VLoanidINTPRIMARYKEY,AmountDECIMAL(10,2),
CustidINT,
FOREIGNKEY(Custid)REFERENCESCustomer(Custid)ONDELETECASCADE
);

Customertable:
Custid:PrimaryKey.
Custname:Nameofthecustomer.
phno:Phonenumber.
pan:PANnumber(Unique).
DOB:Dateofbirth.
HomeLoantable:
HLoanid:PrimaryKey.
Amount:Homeloanamount.
Custid:ReferencesCustidintheCustomertable(ForeignKey).
VehicleLoantable:
VLoanid:PrimaryKey.
Amount:Vehicleloanamount.
Custid:ReferencesCustidintheCustomertable(ForeignKey).

QueriesforEachSubpart

ListtheCustidofthecustomerswhohavebothhomeloanandvehicleloan:

sql
Copy codeSELECTCustidFROMHomeLoanINTERSECT
SELECT CustidFROMVehicleLoan;

ThisqueryfindscustomerswhoseCustidexistsinbothHomeLoanandVehicleLoantablesusingtheINTERSECToperation.

ListtheCustidofthecustomerswhodonothaveanyloan:

sql
Copy codeSELECTCustidFROMCustomer
WHERE Custid NOT IN (SELECT Custid FROM HomeLoan)ANDCustidNOTIN(SELECTCustidFROMVehicleLoan);

ThisqueryselectscustomersfromtheCustomertablewhoseCustiddoesnotappearineitherHomeLoanorVehicleLoan.

CreateaView

CreateaviewwithCustid,Custname,andtotalloanamount(HomeLoanandVehicleLoan):

sql
Copycode
CREATEVIEWCustomerTotalLoanASSELECTC.Custid,C.Custname,
COALESCE(H.Amount,0)+COALESCE(V.Amount,0)ASTotalLoanAmount

FROMCustomerC
LEFT JOIN HomeLoan H ON C.Custid = H.CustidLEFTJOINVehicleLoanVONC.Custid=V.Custid;

ThisviewusesLEFTJOINtoensurethatallcustomersareincluded,eveniftheydonothave aloan.
COALESCEisusedtotreatNULLvaluesas0whenacustomerdoesnothaveaparticularloantype.

CreateaTrigger

WriteatriggertodisplaytheHomeLoandetailswhenevervaluesareinsertedintotherespectivetable:

sql
Copy codeDELIMITER//

CREATETRIGGERDisplayHomeLoanAfterInsertAFTERINSERTONHomeLoan
FOREACHROWBEGIN
DECLAREv_CustnameVARCHAR(100);

--GetthecustomernamefromtheCustomertableSELECTCustnameINTOv_Custname
FROMCustomer
WHERECustid=NEW.Custid;

--DisplayHomeLoandetails
SELECTNEW.HLoanidASHomeLoanID,v_CustnameASCustomerName,NEW.AmountASLoanAmount;
END //DELIMITER;
Explanation:

TriggerName:DisplayHomeLoanAfterInsert
TriggerType:AFTERINSERTâ€”Itfiresafteranewrecordisinsertedintothe
HomeLoantable.
TriggerAction:RetrievestheCustnamefromtheCustomertableusingtheCustid
ofthenewlyinsertedhomeloan.
SELECTStatement:UsesSELECT...INTOtogettheCustnameandthendisplaysthenewhomeloandetails.

Summary

TablesCustomer, HomeLoan, and VehicleLoan arecreated with primaryand foreignkeyconstraints.
Queriesfor(a)and(b)findcustomerswithbothloansandthosewithoutanyloans.
Theviewin(c)combinescustomerinformationwithtotalloanamounts.
Thetriggerin(d)ensuresthatdetailsofanewlyinsertedhomeloanaredisplayed.

4o

Yousaid:

7.Createthefollowingtableswithgivenattributeshavingappropriatedatatypeandspecifythenecessaryprimaryandforeignkeyconstraints:Product(Prodid,Prodesc,Price,Stock)Sales(Salesid,Prodid,qty)a)AddacolumnreorderinProducttablehavingvalue50forallproducts.b)DisplaytheProductidforindescendingorderofquantityordered.c)WriteafunctiontodisplaytheFibonacciseries.d)WriteaPL/SQLprogramtofindgive
